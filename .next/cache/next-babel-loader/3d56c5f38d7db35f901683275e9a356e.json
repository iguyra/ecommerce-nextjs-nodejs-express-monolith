{"ast":null,"code":"import { create } from \"./server/models/userModel\";\nexport var addFirstProduct = function addFirstProduct(product) {\n  var productPrice = product.price; //create an empty array and push the item\n\n  var newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: +productPrice\n  };\n  var newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\n  return newCart;\n}; // create a new product object\n\nexport var createNewProduct = function createNewProduct(product, productPrice, qty) {\n  return {\n    productId: product._id,\n    image: product.image,\n    price: productPrice,\n    name: product.name,\n    qty: qty,\n    totalPrice: productPrice * qty\n  };\n};\nexport var updateCart = function updateCart(existingCart, product, qtytoBeAdded) {\n  var newQty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var updatedProducts = getUpdatedProducts(existingCart.products, product, qtytoBeAdded, newQty);\n  console.log(\"updatedProducts\", updatedProducts);\n\n  var addPrice = function addPrice(total, item) {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  }; //loop through the updated proudct array and add the totALprice of each item to get the totalPrice\n\n\n  var total = updatedProducts.reduce(addPrice, {\n    totalPrice: 0,\n    qty: 0\n  });\n  var updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: +total.qty,\n    totalProductsPrice: +total.totalPrice\n  };\n  localStorage.setItem(\"isavecart\", JSON.stringify(updatedCart));\n  return updatedCart;\n}; //get updated products array\n//update the product if its exist\n//and add the new product to the existing cart\n\nexport var getUpdatedProducts = function getUpdatedProducts(existingProductInCart, product, qtyToBeAdded) {\n  var newQty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var productExistIndex = isProductInCart(existingProductInCart, product._id); //if product exist (index of that product is found in te array) update the product qunatity and totalPrice\n\n  if (-1 < productExistIndex) {\n    var updateProducts = existingProductInCart;\n    var updatedProduct = updateProducts[productExistIndex]; //if we have the new quamtity of the product avail, se that else add the qtyToBeAdded\n\n    updatedProduct.qty = newQty ? newQty : updatedProduct.qty + qtyToBeAdded;\n    updatedProduct.totalPrice = updatedProduct.price * updatedProduct.qty;\n    updatedProduct.totalPrice = updatedProduct.price * updatedProduct.qty;\n    return updatedProduct;\n  } else {\n    //if the product is not dound push the new product to the existing product array\n    var productPrice = product.price;\n    var newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\n    existingProductInCart.push(newProduct);\n    return existingProductInCart;\n  }\n}; //return index of the product if it exists\n\nexport var isProductInCart = function isProductInCart(existingProductInCart, productId) {\n  console.log(\"existingProductInCart\", existingProductInCart);\n\n  var returnItemThatExists = function returnItemThatExists(item, index) {\n    if (productId === item.productId) {\n      return item;\n    }\n  };\n\n  var newArray = existingProductInCart.filter(returnItemThatExists);\n  return existingProductInCart.indexOf(newArray[0]);\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/isave/functions.js"],"names":["create","addFirstProduct","product","productPrice","price","newCart","products","totalProductsCount","totalProductsPrice","newProduct","createNewProduct","push","localStorage","setItem","JSON","stringify","qty","productId","_id","image","name","totalPrice","updateCart","existingCart","qtytoBeAdded","newQty","updatedProducts","getUpdatedProducts","console","log","addPrice","total","item","reduce","updatedCart","existingProductInCart","qtyToBeAdded","productExistIndex","isProductInCart","updateProducts","updatedProduct","returnItemThatExists","index","newArray","filter","indexOf"],"mappings":"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","sourcesContent":["import { create } from \"./server/models/userModel\";\r\n\r\nexport const addFirstProduct = (product) => {\r\n  let productPrice = product.price;\r\n\r\n  //create an empty array and push the item\r\n\r\n  let newCart = {\r\n    products: [],\r\n    totalProductsCount: 1,\r\n    totalProductsPrice: +productPrice,\r\n  };\r\n\r\n  const newProduct = createNewProduct(product, productPrice, 1);\r\n\r\n  newCart.products.push(newProduct);\r\n\r\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\r\n  return newCart;\r\n};\r\n\r\n// create a new product object\r\nexport const createNewProduct = (product, productPrice, qty) => {\r\n  return {\r\n    productId: product._id,\r\n    image: product.image,\r\n    price: productPrice,\r\n    name: product.name,\r\n    qty: qty,\r\n    totalPrice: productPrice * qty,\r\n  };\r\n};\r\n\r\nexport const updateCart = (existingCart, product, qtytoBeAdded, newQty = false) => {\r\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qtytoBeAdded, newQty);\r\n  console.log(\"updatedProducts\", updatedProducts);\r\n\r\n  const addPrice = (total, item) => {\r\n    total.totalPrice += item.totalPrice;\r\n    total.qty += item.qty;\r\n\r\n    return total;\r\n  };\r\n\r\n  //loop through the updated proudct array and add the totALprice of each item to get the totalPrice\r\n  let total = updatedProducts.reduce(addPrice, { totalPrice: 0, qty: 0 });\r\n\r\n  const updatedCart = {\r\n    products: updatedProducts,\r\n    totalProductsCount: +total.qty,\r\n    totalProductsPrice: +total.totalPrice,\r\n  };\r\n  localStorage.setItem(\"isavecart\", JSON.stringify(updatedCart));\r\n  return updatedCart;\r\n};\r\n\r\n//get updated products array\r\n//update the product if its exist\r\n//and add the new product to the existing cart\r\nexport const getUpdatedProducts = (existingProductInCart, product, qtyToBeAdded, newQty = false) => {\r\n  const productExistIndex = isProductInCart(existingProductInCart, product._id);\r\n\r\n  //if product exist (index of that product is found in te array) update the product qunatity and totalPrice\r\n  if (-1 < productExistIndex) {\r\n    let updateProducts = existingProductInCart;\r\n    let updatedProduct = updateProducts[productExistIndex];\r\n\r\n    //if we have the new quamtity of the product avail, se that else add the qtyToBeAdded\r\n\r\n    updatedProduct.qty = newQty ? newQty : updatedProduct.qty + qtyToBeAdded;\r\n    updatedProduct.totalPrice = updatedProduct.price * updatedProduct.qty;\r\n    updatedProduct.totalPrice = updatedProduct.price * updatedProduct.qty;\r\n\r\n    return updatedProduct;\r\n  } else {\r\n    //if the product is not dound push the new product to the existing product array\r\n    let productPrice = product.price;\r\n    const newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\r\n    existingProductInCart.push(newProduct);\r\n    return existingProductInCart;\r\n  }\r\n};\r\n\r\n//return index of the product if it exists\r\nexport const isProductInCart = (existingProductInCart, productId) => {\r\n  console.log(\"existingProductInCart\", existingProductInCart);\r\n  const returnItemThatExists = (item, index) => {\r\n    if (productId === item.productId) {\r\n      return item;\r\n    }\r\n  };\r\n\r\n  const newArray = existingProductInCart.filter(returnItemThatExists);\r\n  return existingProductInCart.indexOf(newArray[0]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}