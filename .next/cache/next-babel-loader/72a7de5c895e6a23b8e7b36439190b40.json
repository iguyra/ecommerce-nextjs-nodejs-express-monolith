{"ast":null,"code":"const axios = require(\"axios\");\n\nconst User = require(\"./models/userModel\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst {\n  promisify\n} = require(\"util\");\n\nexports.signup = async (req, res, next) => {\n  try {\n    const {\n      email,\n      password,\n      passwordConfirm\n    } = req.body;\n    const newUser = await User.create({\n      email,\n      password,\n      passwordConfirm\n    });\n    const token = jwt.sign({\n      id: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: process.env.JWT_EXPIRES_IN\n    });\n    const cookieOptions = {\n      expires: new Date(Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000),\n      // secure: true,\n      httpOnly: true //converted to milliseconds\n\n    };\n    res.cookie(\"jwt\", token, cookieOptions);\n    console.log(\"account created\");\n    res.status(201).json({\n      status: \"success\",\n      token: token,\n      data: {\n        newUser\n      }\n    });\n  } catch (err) {\n    console.log(\"errrorr\", err);\n  }\n};\n\nexports.login = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await User.findOne({\n      email\n    }).select(\"+password\");\n\n    if (!email || !password) {\n      return console.log(\"please type credientials\");\n    }\n\n    if (!user || !(await user.correctPassword(password, user.password))) {\n      return console.log(\"user does not exist, try again\");\n    }\n\n    console.log(\"account found\");\n    const token = jwt.sign({\n      id: user._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: process.env.JWT_EXPIRES_IN\n    });\n    const cookieOptions = {\n      expires: new Date(Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000),\n      // secure: true,\n      httpOnly: true //converted to milliseconds\n\n    };\n    res.cookie(\"jwt\", token, cookieOptions);\n    res.status(201).json({\n      status: \"success\",\n      token: token,\n      data: {\n        user\n      }\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexports.protected = async (req, res, next) => {\n  const user = {\n    name: \"res\"\n  };\n  let token;\n\n  if (req.headers.authorization && req.headers.authorization.startsWith(\"Bearer\")) {\n    token = req.headers.authorization.split(\" \")[1];\n  }\n\n  const verifiedToken = await promisify(jwt.verify)(token, process.env.JWT_SECRET);\n  const currentUser = await User.findById(verifiedToken.id);\n  console.log(\"req.headers.authorization\", req.headers.authorization, \"verifiedToken\", currentUser);\n  req.user = currentUser;\n  next();\n};\n\nexports.getUser = (req, res) => {\n  console.log(\"protected accesed\");\n  const user = req.user;\n  res.json({\n    user\n  });\n};\n\nexports.getFrontUser = async token => {\n  console.log(\"componentmounted\", token);\n\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(\"http://localhost:3000/api/users/cart\", config);\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}