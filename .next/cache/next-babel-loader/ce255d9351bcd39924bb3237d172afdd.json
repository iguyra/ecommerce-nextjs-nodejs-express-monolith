{"ast":null,"code":"import { create } from \"./server/models/userModel\";\nexport const addFirstProduct = product => {\n  let productPrice = product.price; //create an empty array and push the item\n\n  let newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: +productPrice\n  };\n  const newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\n  return newCart;\n}; // create a new product object\n\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productId: product._id,\n    image: product.image,\n    price: productPrice,\n    name: product.name,\n    qty: qty,\n    totalPrice: productPrice * qty\n  };\n};\nexport const updateCart = (existingCart, product, qtytoBeAdded, newQty = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.product, product, qtytoBeAdded, newQty);\n\n  const addPrice = (total, item) => {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  }; //loop through the updated proudct array and add the totALprice of each item to get the totalPrice\n\n\n  let total = updatedProducts.reduce(addPrice, {\n    totalPrice: 0,\n    qty: 0\n  });\n  const updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: parseInt(total.qty),\n    totalProductsPrice: parseFloat(total.totalPrice)\n  };\n  localStorage.setItem(\"isavecart\", JSON.stringify(updatedCart));\n  return updatedCart;\n}; //get updated products array\n//update the product if its exist\n//and add the new product to the existing cart\n\nexport const getUpdatedProducts = (existingProductInCart, product, qtyToBeAdded, newQty = false) => {\n  const productExistIndex = isProductInCart(existingProductInCart, product._id); //if product exist (index of that product is found in te array) update the product qunatity and totalPrice\n\n  if (-1 < productExistIndex) {\n    let updateProducts = existingProductInCart;\n    let updatedProduct = updateProducts[productExistIndex]; //if we have the new quamtity of the product avail, se that else add the qtyToBeAdded\n\n    updateProduct.qty = newQty ? parseInt(newQty) : parseInt(updatedProduct.qty + qtyToBeAdded);\n    updateProduct.totalPrice = parseFloat(updatedProduct.price * updatedProduct.qty);\n    updateProduct.totalPrice = parseFloat(updatedProduct.price * updatedProduct.qty);\n    return updatedProduct;\n  } else {\n    //if the product is not dound push the new product to the existing product array\n    let productPrice = product.price;\n    const newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\n    existingProductInCart.push(newProduct);\n    return existingProductInCart;\n  }\n}; //return index of the product if it exists\n\nexport const isProductInCart = (existingProductInCart, productId) => {\n  const returnItemThatExists = (item, index) => {\n    if (productId === item.product._id) {\n      return item;\n    }\n  };\n\n  const newArray = existingProductInCart.filter(returnItemThatExists);\n  return existingProductInCart.indexOf(newArray[0]);\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/isave/functions.js"],"names":["create","addFirstProduct","product","productPrice","price","newCart","products","totalProductsCount","totalProductsPrice","newProduct","createNewProduct","push","localStorage","setItem","JSON","stringify","qty","productId","_id","image","name","totalPrice","updateCart","existingCart","qtytoBeAdded","newQty","updatedProducts","getUpdatedProducts","addPrice","total","item","reduce","updatedCart","parseInt","parseFloat","existingProductInCart","qtyToBeAdded","productExistIndex","isProductInCart","updateProducts","updatedProduct","updateProduct","returnItemThatExists","index","newArray","filter","indexOf"],"mappings":"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","sourcesContent":["import { create } from \"./server/models/userModel\";\r\n\r\nexport const addFirstProduct = (product) => {\r\n  let productPrice = product.price;\r\n\r\n  //create an empty array and push the item\r\n\r\n  let newCart = {\r\n    products: [],\r\n    totalProductsCount: 1,\r\n    totalProductsPrice: +productPrice,\r\n  };\r\n\r\n  const newProduct = createNewProduct(product, productPrice, 1);\r\n\r\n  newCart.products.push(newProduct);\r\n\r\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\r\n  return newCart;\r\n};\r\n\r\n// create a new product object\r\nexport const createNewProduct = (product, productPrice, qty) => {\r\n  return {\r\n    productId: product._id,\r\n    image: product.image,\r\n    price: productPrice,\r\n    name: product.name,\r\n    qty: qty,\r\n    totalPrice: productPrice * qty,\r\n  };\r\n};\r\n\r\nexport const updateCart = (existingCart, product, qtytoBeAdded, newQty = false) => {\r\n  const updatedProducts = getUpdatedProducts(existingCart.product, product, qtytoBeAdded, newQty);\r\n  const addPrice = (total, item) => {\r\n    total.totalPrice += item.totalPrice;\r\n    total.qty += item.qty;\r\n\r\n    return total;\r\n  };\r\n\r\n  //loop through the updated proudct array and add the totALprice of each item to get the totalPrice\r\n  let total = updatedProducts.reduce(addPrice, { totalPrice: 0, qty: 0 });\r\n\r\n  const updatedCart = {\r\n    products: updatedProducts,\r\n    totalProductsCount: parseInt(total.qty),\r\n    totalProductsPrice: parseFloat(total.totalPrice),\r\n  };\r\n  localStorage.setItem(\"isavecart\", JSON.stringify(updatedCart));\r\n  return updatedCart;\r\n};\r\n\r\n//get updated products array\r\n//update the product if its exist\r\n//and add the new product to the existing cart\r\nexport const getUpdatedProducts = (existingProductInCart, product, qtyToBeAdded, newQty = false) => {\r\n  const productExistIndex = isProductInCart(existingProductInCart, product._id);\r\n\r\n  //if product exist (index of that product is found in te array) update the product qunatity and totalPrice\r\n  if (-1 < productExistIndex) {\r\n    let updateProducts = existingProductInCart;\r\n    let updatedProduct = updateProducts[productExistIndex];\r\n\r\n    //if we have the new quamtity of the product avail, se that else add the qtyToBeAdded\r\n\r\n    updateProduct.qty = newQty ? parseInt(newQty) : parseInt(updatedProduct.qty + qtyToBeAdded);\r\n    updateProduct.totalPrice = parseFloat(updatedProduct.price * updatedProduct.qty);\r\n    updateProduct.totalPrice = parseFloat(updatedProduct.price * updatedProduct.qty);\r\n    return updatedProduct;\r\n  } else {\r\n    //if the product is not dound push the new product to the existing product array\r\n    let productPrice = product.price;\r\n    const newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\r\n    existingProductInCart.push(newProduct);\r\n    return existingProductInCart;\r\n  }\r\n};\r\n\r\n//return index of the product if it exists\r\nexport const isProductInCart = (existingProductInCart, productId) => {\r\n  const returnItemThatExists = (item, index) => {\r\n    if (productId === item.product._id) {\r\n      return item;\r\n    }\r\n  };\r\n\r\n  const newArray = existingProductInCart.filter(returnItemThatExists);\r\n  return existingProductInCart.indexOf(newArray[0]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}