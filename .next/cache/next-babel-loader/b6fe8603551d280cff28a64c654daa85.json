{"ast":null,"code":"import { create } from \"./server/models/userModel\";\nexport var addFirstProduct = function addFirstProduct(product) {\n  var productPrice = product.price; //create an empty array and push the item\n\n  var newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: +productPrice\n  };\n  var newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\n  return newCart;\n}; // create a new product object\n\nexport var createNewProduct = function createNewProduct(product, productPrice, qty) {\n  return {\n    _id: product._id,\n    image: product.image,\n    price: productPrice,\n    name: product.name,\n    qty: qty,\n    totalPrice: productPrice * qty\n  };\n};\nexport var updateCart = function updateCart(existingCart, product, qtytoBeAdded) {\n  var newQty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var updatedProducts = getUpdatedProducts(existingCart.products, product, qtytoBeAdded, newQty);\n\n  var addPrice = function addPrice(total, item) {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  }; //loop through the updated proudct array and add the totALprice of each item to get the totalPrice\n\n\n  var total = updatedProducts.reduce(addPrice, {\n    totalPrice: 0,\n    qty: 0\n  });\n  var updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: +total.qty,\n    totalProductsPrice: +total.totalPrice\n  };\n  localStorage.setItem(\"isavecart\", JSON.stringify(updatedCart));\n  return updatedCart;\n}; //get updated products array\n//update the product if its exist\n//and add the new product to the existing cart\n\nexport var getUpdatedProducts = function getUpdatedProducts(existingProductsInCart, product, qtyToBeAdded) {\n  var newQty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var productExistIndex = isProductInCart(existingProductsInCart, product._id);\n  console.log(\"productExistIndex\", productExistIndex, product._id, product.productId); //if product exist (index of that product is found in te array) update the product qunatity and totalPrice\n\n  if (-1 < productExistIndex) {\n    var updatedProducts = existingProductsInCart;\n    var updatedProduct = updatedProducts[productExistIndex]; //if we have the new quantity of the product avail, se that else add the qtyToBeAdded\n\n    updatedProduct.qty = newQty ? +newQty : +updatedProduct.qty + qtyToBeAdded;\n    updatedProduct.totalPrice = +updatedProduct.price * +updatedProduct.qty; // updatedProduct.totalPrice = updatedProduct.price * updatedProduct.qty;\n\n    return updatedProducts;\n  } else {\n    //if the product is not found push the new product to the existing product array\n    var productPrice = +product.price;\n    var newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\n    existingProductsInCart.push(newProduct);\n    return existingProductsInCart;\n  }\n}; //return index of the product if it exists\n\nexport var isProductInCart = function isProductInCart(existingProductsInCart, productId) {\n  var returnItemThatExists = function returnItemThatExists(item, index) {\n    if (productId === item._id) {\n      return item;\n    }\n  };\n\n  var newArray = existingProductsInCart.filter(returnItemThatExists);\n  console.log(\"returnItemThatExists\", productId, newArray);\n  return existingProductsInCart.indexOf(newArray[0]);\n};\nexport var updateQuantity = function updateQuantity(product, productCount) {\n  var newQty = +productCount + 1;\n  console.log(newQty);\n  var productPrice = product.price;\n  var newCart = {\n    products: [],\n    totalProductsCount: newQty,\n    totalProductsPrice: +productPrice * newQty\n  };\n  var newProduct = createNewProduct(product, productPrice, newQty);\n  newCart.products.push(newProduct);\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\n  console.log(newCart);\n  return {\n    newQty: newQty,\n    newCart: newCart\n  };\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/isave/functions.js"],"names":["create","addFirstProduct","product","productPrice","price","newCart","products","totalProductsCount","totalProductsPrice","newProduct","createNewProduct","push","localStorage","setItem","JSON","stringify","qty","_id","image","name","totalPrice","updateCart","existingCart","qtytoBeAdded","newQty","updatedProducts","getUpdatedProducts","addPrice","total","item","reduce","updatedCart","existingProductsInCart","qtyToBeAdded","productExistIndex","isProductInCart","console","log","productId","updatedProduct","returnItemThatExists","index","newArray","filter","indexOf","updateQuantity","productCount"],"mappings":"AAAA,SAASA,MAAT,QAAuB,2BAAvB;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAa;AAC1C,MAAIC,YAAY,GAAGD,OAAO,CAACE,KAA3B,CAD0C,CAG1C;;AAEA,MAAIC,OAAO,GAAG;AACZC,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,kBAAkB,EAAE,CAFR;AAGZC,IAAAA,kBAAkB,EAAE,CAACL;AAHT,GAAd;AAMA,MAAMM,UAAU,GAAGC,gBAAgB,CAACR,OAAD,EAAUC,YAAV,EAAwB,CAAxB,CAAnC;AAEAE,EAAAA,OAAO,CAACC,QAAR,CAAiBK,IAAjB,CAAsBF,UAAtB;AAEAG,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeV,OAAf,CAAlC;AACA,SAAOA,OAAP;AACD,CAjBM,C,CAmBP;;AACA,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACR,OAAD,EAAUC,YAAV,EAAwBa,GAAxB,EAAgC;AAC9D,SAAO;AACLC,IAAAA,GAAG,EAAEf,OAAO,CAACe,GADR;AAELC,IAAAA,KAAK,EAAEhB,OAAO,CAACgB,KAFV;AAGLd,IAAAA,KAAK,EAAED,YAHF;AAILgB,IAAAA,IAAI,EAAEjB,OAAO,CAACiB,IAJT;AAKLH,IAAAA,GAAG,EAAEA,GALA;AAMLI,IAAAA,UAAU,EAAEjB,YAAY,GAAGa;AANtB,GAAP;AAQD,CATM;AAWP,OAAO,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACC,YAAD,EAAepB,OAAf,EAAwBqB,YAAxB,EAAyD;AAAA,MAAnBC,MAAmB,uEAAV,KAAU;AACjF,MAAMC,eAAe,GAAGC,kBAAkB,CAACJ,YAAY,CAAChB,QAAd,EAAwBJ,OAAxB,EAAiCqB,YAAjC,EAA+CC,MAA/C,CAA1C;;AAEA,MAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,IAAR,EAAiB;AAChCD,IAAAA,KAAK,CAACR,UAAN,IAAoBS,IAAI,CAACT,UAAzB;AACAQ,IAAAA,KAAK,CAACZ,GAAN,IAAaa,IAAI,CAACb,GAAlB;AAEA,WAAOY,KAAP;AACD,GALD,CAHiF,CAUjF;;;AACA,MAAIA,KAAK,GAAGH,eAAe,CAACK,MAAhB,CAAuBH,QAAvB,EAAiC;AAAEP,IAAAA,UAAU,EAAE,CAAd;AAAiBJ,IAAAA,GAAG,EAAE;AAAtB,GAAjC,CAAZ;AAEA,MAAMe,WAAW,GAAG;AAClBzB,IAAAA,QAAQ,EAAEmB,eADQ;AAElBlB,IAAAA,kBAAkB,EAAE,CAACqB,KAAK,CAACZ,GAFT;AAGlBR,IAAAA,kBAAkB,EAAE,CAACoB,KAAK,CAACR;AAHT,GAApB;AAKAR,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAegB,WAAf,CAAlC;AACA,SAAOA,WAAP;AACD,CApBM,C,CAsBP;AACA;AACA;;AACA,OAAO,IAAML,kBAAkB,GAAG,SAArBA,kBAAqB,CAACM,sBAAD,EAAyB9B,OAAzB,EAAkC+B,YAAlC,EAAmE;AAAA,MAAnBT,MAAmB,uEAAV,KAAU;AACnG,MAAMU,iBAAiB,GAAGC,eAAe,CAACH,sBAAD,EAAyB9B,OAAO,CAACe,GAAjC,CAAzC;AACAmB,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCH,iBAAjC,EAAoDhC,OAAO,CAACe,GAA5D,EAAiEf,OAAO,CAACoC,SAAzE,EAFmG,CAInG;;AACA,MAAI,CAAC,CAAD,GAAKJ,iBAAT,EAA4B;AAC1B,QAAIT,eAAe,GAAGO,sBAAtB;AACA,QAAIO,cAAc,GAAGd,eAAe,CAACS,iBAAD,CAApC,CAF0B,CAI1B;;AAEAK,IAAAA,cAAc,CAACvB,GAAf,GAAqBQ,MAAM,GAAG,CAACA,MAAJ,GAAa,CAACe,cAAc,CAACvB,GAAhB,GAAsBiB,YAA9D;AACAM,IAAAA,cAAc,CAACnB,UAAf,GAA4B,CAACmB,cAAc,CAACnC,KAAhB,GAAwB,CAACmC,cAAc,CAACvB,GAApE,CAP0B,CAQ1B;;AAEA,WAAOS,eAAP;AACD,GAXD,MAWO;AACL;AACA,QAAItB,YAAY,GAAG,CAACD,OAAO,CAACE,KAA5B;AACA,QAAMK,UAAU,GAAGC,gBAAgB,CAACR,OAAD,EAAUC,YAAV,EAAwB8B,YAAxB,CAAnC;AACAD,IAAAA,sBAAsB,CAACrB,IAAvB,CAA4BF,UAA5B;AACA,WAAOuB,sBAAP;AACD;AACF,CAvBM,C,CAyBP;;AACA,OAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACH,sBAAD,EAAyBM,SAAzB,EAAuC;AACpE,MAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACX,IAAD,EAAOY,KAAP,EAAiB;AAC5C,QAAIH,SAAS,KAAKT,IAAI,CAACZ,GAAvB,EAA4B;AAC1B,aAAOY,IAAP;AACD;AACF,GAJD;;AAMA,MAAMa,QAAQ,GAAGV,sBAAsB,CAACW,MAAvB,CAA8BH,oBAA9B,CAAjB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCC,SAApC,EAA+CI,QAA/C;AAEA,SAAOV,sBAAsB,CAACY,OAAvB,CAA+BF,QAAQ,CAAC,CAAD,CAAvC,CAAP;AACD,CAXM;AAaP,OAAO,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAAC3C,OAAD,EAAU4C,YAAV,EAA2B;AACvD,MAAMtB,MAAM,GAAG,CAACsB,YAAD,GAAgB,CAA/B;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AACA,MAAMrB,YAAY,GAAGD,OAAO,CAACE,KAA7B;AAEA,MAAIC,OAAO,GAAG;AACZC,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,kBAAkB,EAAEiB,MAFR;AAGZhB,IAAAA,kBAAkB,EAAE,CAACL,YAAD,GAAgBqB;AAHxB,GAAd;AAKA,MAAMf,UAAU,GAAGC,gBAAgB,CAACR,OAAD,EAAUC,YAAV,EAAwBqB,MAAxB,CAAnC;AAEAnB,EAAAA,OAAO,CAACC,QAAR,CAAiBK,IAAjB,CAAsBF,UAAtB;AACAG,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeV,OAAf,CAAlC;AACA+B,EAAAA,OAAO,CAACC,GAAR,CAAYhC,OAAZ;AAEA,SAAO;AAAEmB,IAAAA,MAAM,EAANA,MAAF;AAAUnB,IAAAA,OAAO,EAAPA;AAAV,GAAP;AACD,CAjBM","sourcesContent":["import { create } from \"./server/models/userModel\";\r\n\r\nexport const addFirstProduct = (product) => {\r\n  let productPrice = product.price;\r\n\r\n  //create an empty array and push the item\r\n\r\n  let newCart = {\r\n    products: [],\r\n    totalProductsCount: 1,\r\n    totalProductsPrice: +productPrice,\r\n  };\r\n\r\n  const newProduct = createNewProduct(product, productPrice, 1);\r\n\r\n  newCart.products.push(newProduct);\r\n\r\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\r\n  return newCart;\r\n};\r\n\r\n// create a new product object\r\nexport const createNewProduct = (product, productPrice, qty) => {\r\n  return {\r\n    _id: product._id,\r\n    image: product.image,\r\n    price: productPrice,\r\n    name: product.name,\r\n    qty: qty,\r\n    totalPrice: productPrice * qty,\r\n  };\r\n};\r\n\r\nexport const updateCart = (existingCart, product, qtytoBeAdded, newQty = false) => {\r\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qtytoBeAdded, newQty);\r\n\r\n  const addPrice = (total, item) => {\r\n    total.totalPrice += item.totalPrice;\r\n    total.qty += item.qty;\r\n\r\n    return total;\r\n  };\r\n\r\n  //loop through the updated proudct array and add the totALprice of each item to get the totalPrice\r\n  let total = updatedProducts.reduce(addPrice, { totalPrice: 0, qty: 0 });\r\n\r\n  const updatedCart = {\r\n    products: updatedProducts,\r\n    totalProductsCount: +total.qty,\r\n    totalProductsPrice: +total.totalPrice,\r\n  };\r\n  localStorage.setItem(\"isavecart\", JSON.stringify(updatedCart));\r\n  return updatedCart;\r\n};\r\n\r\n//get updated products array\r\n//update the product if its exist\r\n//and add the new product to the existing cart\r\nexport const getUpdatedProducts = (existingProductsInCart, product, qtyToBeAdded, newQty = false) => {\r\n  const productExistIndex = isProductInCart(existingProductsInCart, product._id);\r\n  console.log(\"productExistIndex\", productExistIndex, product._id, product.productId);\r\n\r\n  //if product exist (index of that product is found in te array) update the product qunatity and totalPrice\r\n  if (-1 < productExistIndex) {\r\n    let updatedProducts = existingProductsInCart;\r\n    let updatedProduct = updatedProducts[productExistIndex];\r\n\r\n    //if we have the new quantity of the product avail, se that else add the qtyToBeAdded\r\n\r\n    updatedProduct.qty = newQty ? +newQty : +updatedProduct.qty + qtyToBeAdded;\r\n    updatedProduct.totalPrice = +updatedProduct.price * +updatedProduct.qty;\r\n    // updatedProduct.totalPrice = updatedProduct.price * updatedProduct.qty;\r\n\r\n    return updatedProducts;\r\n  } else {\r\n    //if the product is not found push the new product to the existing product array\r\n    let productPrice = +product.price;\r\n    const newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\r\n    existingProductsInCart.push(newProduct);\r\n    return existingProductsInCart;\r\n  }\r\n};\r\n\r\n//return index of the product if it exists\r\nexport const isProductInCart = (existingProductsInCart, productId) => {\r\n  const returnItemThatExists = (item, index) => {\r\n    if (productId === item._id) {\r\n      return item;\r\n    }\r\n  };\r\n\r\n  const newArray = existingProductsInCart.filter(returnItemThatExists);\r\n  console.log(\"returnItemThatExists\", productId, newArray);\r\n\r\n  return existingProductsInCart.indexOf(newArray[0]);\r\n};\r\n\r\nexport const updateQuantity = (product, productCount) => {\r\n  const newQty = +productCount + 1;\r\n  console.log(newQty);\r\n  const productPrice = product.price;\r\n\r\n  let newCart = {\r\n    products: [],\r\n    totalProductsCount: newQty,\r\n    totalProductsPrice: +productPrice * newQty,\r\n  };\r\n  const newProduct = createNewProduct(product, productPrice, newQty);\r\n\r\n  newCart.products.push(newProduct);\r\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\r\n  console.log(newCart);\r\n\r\n  return { newQty, newCart };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}