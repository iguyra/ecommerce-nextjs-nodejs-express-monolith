{"ast":null,"code":"const axios = require(\"axios\");\n\nconst User = require(\"./models/userModel\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nexports.signup = async (req, res, next) => {\n  try {\n    const {\n      email,\n      password,\n      passwordConfirm\n    } = req.body;\n    const newUser = await User.create({\n      email,\n      password,\n      passwordConfirm\n    });\n    const token = jwt.sign({\n      id: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: process.env.JWT_EXPIRES_IN\n    });\n    const cookieOptions = {\n      expires: new Date(Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000),\n      // secure: true,\n      httpOnly: true //converted to milliseconds\n\n    };\n    res.cookie(\"jwt\", token, cookieOptions);\n    console.log(\"account created\");\n    res.status(201).json({\n      status: \"success\",\n      token: token,\n      data: {\n        newUser\n      }\n    });\n  } catch (err) {\n    console.log(\"errrorr\", err);\n  }\n};\n\nexports.login = async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  const user = await User.findOne({\n    email\n  }).select(\"+password\");\n\n  if (!email && !password) {\n    return console.log(\"please type credientials\");\n  }\n\n  const correctPassword = user.password === password;\n  console.log(\"correctPassword\", correctPassword);\n\n  if (!user) {\n    return console.log(\"user does not exist, try again\");\n  }\n\n  console.log(\"account found\");\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/isave/server/fauthContoller.js"],"names":["axios","require","User","jwt","exports","signup","req","res","next","email","password","passwordConfirm","body","newUser","create","token","sign","id","_id","process","env","JWT_SECRET","expiresIn","JWT_EXPIRES_IN","cookieOptions","expires","Date","now","JWT_COOKIE_EXPIRES_IN","httpOnly","cookie","console","log","status","json","data","err","login","user","findOne","select","correctPassword"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,oBAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AAEAG,OAAO,CAACC,MAAR,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACzC,MAAI;AACF,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAAuCL,GAAG,CAACM,IAAjD;AACA,UAAMC,OAAO,GAAG,MAAMX,IAAI,CAACY,MAAL,CAAY;AAChCL,MAAAA,KADgC;AAEhCC,MAAAA,QAFgC;AAGhCC,MAAAA;AAHgC,KAAZ,CAAtB;AAMA,UAAMI,KAAK,GAAGZ,GAAG,CAACa,IAAJ,CAAS;AAAEC,MAAAA,EAAE,EAAEJ,OAAO,CAACK;AAAd,KAAT,EAA8BC,OAAO,CAACC,GAAR,CAAYC,UAA1C,EAAsD;AAClEC,MAAAA,SAAS,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAD2C,KAAtD,CAAd;AAIA,UAAMC,aAAa,GAAG;AACpBC,MAAAA,OAAO,EAAE,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAaR,OAAO,CAACC,GAAR,CAAYQ,qBAAZ,GAAoC,EAApC,GAAyC,EAAzC,GAA8C,EAA9C,GAAmD,IAAzE,CADW;AAEpB;AACAC,MAAAA,QAAQ,EAAE,IAHU,CAGJ;;AAHI,KAAtB;AAMAtB,IAAAA,GAAG,CAACuB,MAAJ,CAAW,KAAX,EAAkBf,KAAlB,EAAyBS,aAAzB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAzB,IAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,MAAAA,MAAM,EAAE,SADW;AAEnBlB,MAAAA,KAAK,EAAEA,KAFY;AAGnBoB,MAAAA,IAAI,EAAE;AACJtB,QAAAA;AADI;AAHa,KAArB;AAOD,GA3BD,CA2BE,OAAOuB,GAAP,EAAY;AACZL,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBI,GAAvB;AACD;AACF,CA/BD;;AAiCAhC,OAAO,CAACiC,KAAR,GAAgB,OAAO/B,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBJ,GAAG,CAACM,IAAhC;AACA,QAAM0B,IAAI,GAAG,MAAMpC,IAAI,CAACqC,OAAL,CAAa;AAAE9B,IAAAA;AAAF,GAAb,EAAwB+B,MAAxB,CAA+B,WAA/B,CAAnB;;AAEA,MAAI,CAAC/B,KAAD,IAAU,CAACC,QAAf,EAAyB;AACvB,WAAOqB,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAP;AACD;;AACD,QAAMS,eAAe,GAAGH,IAAI,CAAC5B,QAAL,KAAkBA,QAA1C;AACAqB,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BS,eAA/B;;AAEA,MAAI,CAACH,IAAL,EAAW;AACT,WAAOP,OAAO,CAACC,GAAR,CAAY,gCAAZ,CAAP;AACD;;AAEDD,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,CAfD","sourcesContent":["const axios = require(\"axios\");\r\nconst User = require(\"./models/userModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\nexports.signup = async (req, res, next) => {\r\n  try {\r\n    const { email, password, passwordConfirm } = req.body;\r\n    const newUser = await User.create({\r\n      email,\r\n      password,\r\n      passwordConfirm,\r\n    });\r\n\r\n    const token = jwt.sign({ id: newUser._id }, process.env.JWT_SECRET, {\r\n      expiresIn: process.env.JWT_EXPIRES_IN,\r\n    });\r\n\r\n    const cookieOptions = {\r\n      expires: new Date(Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000),\r\n      // secure: true,\r\n      httpOnly: true, //converted to milliseconds\r\n    };\r\n\r\n    res.cookie(\"jwt\", token, cookieOptions);\r\n    console.log(\"account created\");\r\n    res.status(201).json({\r\n      status: \"success\",\r\n      token: token,\r\n      data: {\r\n        newUser,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.log(\"errrorr\", err);\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n  const user = await User.findOne({ email }).select(\"+password\");\r\n\r\n  if (!email && !password) {\r\n    return console.log(\"please type credientials\");\r\n  }\r\n  const correctPassword = user.password === password;\r\n  console.log(\"correctPassword\", correctPassword);\r\n\r\n  if (!user) {\r\n    return console.log(\"user does not exist, try again\");\r\n  }\r\n\r\n  console.log(\"account found\");\r\n};\r\n"]},"metadata":{},"sourceType":"script"}