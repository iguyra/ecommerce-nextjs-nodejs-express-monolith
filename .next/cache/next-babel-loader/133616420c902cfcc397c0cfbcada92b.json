{"ast":null,"code":"const axios = require(\"axios\");\n\nconst User = require(\"./models/userModel\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst {\n  promisify\n} = require(\"util\");\n\nexports.signup = async (req, res, next) => {\n  try {\n    const {\n      email,\n      password,\n      passwordConfirm\n    } = req.body;\n    const newUser = await User.create({\n      email,\n      password,\n      passwordConfirm\n    });\n    const token = jwt.sign({\n      id: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: process.env.JWT_EXPIRES_IN\n    });\n    const cookieOptions = {\n      expires: new Date(Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000),\n      // secure: true,\n      httpOnly: true //converted to milliseconds\n\n    };\n    res.cookie(\"jwt\", token, cookieOptions);\n    console.log(\"account created\");\n    res.status(201).json({\n      status: \"success\",\n      token: token,\n      data: {\n        newUser\n      }\n    });\n  } catch (err) {\n    console.log(\"errrorr\", err);\n  }\n};\n\nexports.login = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await User.findOne({\n      email\n    }).select(\"+password\");\n\n    if (!email || !password) {\n      return console.log(\"please type credientials\");\n    }\n\n    if (!user || !(await user.correctPassword(password, user.password))) {\n      return console.log(\"user does not exist, try again\");\n    }\n\n    console.log(\"account found\");\n    const token = jwt.sign({\n      id: user._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: process.env.JWT_EXPIRES_IN\n    });\n    const cookieOptions = {\n      expires: new Date(Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000),\n      // secure: true,\n      httpOnly: true //converted to milliseconds\n\n    };\n    res.cookie(\"jwt\", token, cookieOptions);\n    res.status(201).json({\n      status: \"success\",\n      token: token,\n      data: {\n        user\n      }\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexports.protected = async (req, res, next) => {\n  const user = {\n    name: \"res\"\n  };\n  let token;\n\n  if (req.headers.authorization && req.headers.authorization.startsWith(\"Bearer\")) {\n    token = req.headers.authorization.split(\" \")[1];\n  }\n\n  const verifiedToken = await promisify(jwt.verify)(token, process.env.JWT_SECRET);\n  const currentUser = await User.findById(verifiedToken.id);\n  console.log(\"req.headers.authorization\", req.headers.authorization, \"verifiedToken\", currentUser);\n  req.user = currentUser;\n  next();\n};\n\nexports.getUser = (req, res) => {\n  console.log(\"protected accesed\");\n  const user = req.user;\n  res.json({\n    user\n  });\n};\n\nexports.getFrontUser = async token => {\n  console.log(\"componentmounted\", token);\n\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(\"http://localhost:3000/api/users/cart\", config);\n    return data;\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/isave/server/fauthContoller.js"],"names":["axios","require","User","jwt","promisify","exports","signup","req","res","next","email","password","passwordConfirm","body","newUser","create","token","sign","id","_id","process","env","JWT_SECRET","expiresIn","JWT_EXPIRES_IN","cookieOptions","expires","Date","now","JWT_COOKIE_EXPIRES_IN","httpOnly","cookie","console","log","status","json","data","err","login","user","findOne","select","correctPassword","protected","name","headers","authorization","startsWith","split","verifiedToken","verify","currentUser","findById","getUser","getFrontUser","config","Authorization","get"],"mappings":"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","sourcesContent":["const axios = require(\"axios\");\r\nconst User = require(\"./models/userModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst { promisify } = require(\"util\");\r\n\r\nexports.signup = async (req, res, next) => {\r\n  try {\r\n    const { email, password, passwordConfirm } = req.body;\r\n    const newUser = await User.create({\r\n      email,\r\n      password,\r\n      passwordConfirm,\r\n    });\r\n\r\n    const token = jwt.sign({ id: newUser._id }, process.env.JWT_SECRET, {\r\n      expiresIn: process.env.JWT_EXPIRES_IN,\r\n    });\r\n\r\n    const cookieOptions = {\r\n      expires: new Date(Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000),\r\n      // secure: true,\r\n      httpOnly: true, //converted to milliseconds\r\n    };\r\n\r\n    res.cookie(\"jwt\", token, cookieOptions);\r\n    console.log(\"account created\");\r\n    res.status(201).json({\r\n      status: \"success\",\r\n      token: token,\r\n      data: {\r\n        newUser,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.log(\"errrorr\", err);\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const user = await User.findOne({ email }).select(\"+password\");\r\n\r\n    if (!email || !password) {\r\n      return console.log(\"please type credientials\");\r\n    }\r\n\r\n    if (!user || !(await user.correctPassword(password, user.password))) {\r\n      return console.log(\"user does not exist, try again\");\r\n    }\r\n\r\n    console.log(\"account found\");\r\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {\r\n      expiresIn: process.env.JWT_EXPIRES_IN,\r\n    });\r\n\r\n    const cookieOptions = {\r\n      expires: new Date(Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000),\r\n      // secure: true,\r\n      httpOnly: true, //converted to milliseconds\r\n    };\r\n\r\n    res.cookie(\"jwt\", token, cookieOptions);\r\n\r\n    res.status(201).json({\r\n      status: \"success\",\r\n      token: token,\r\n      data: {\r\n        user,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexports.protected = async (req, res, next) => {\r\n  const user = {\r\n    name: \"res\",\r\n  };\r\n\r\n  let token;\r\n  if (req.headers.authorization && req.headers.authorization.startsWith(\"Bearer\")) {\r\n    token = req.headers.authorization.split(\" \")[1];\r\n  }\r\n\r\n  const verifiedToken = await promisify(jwt.verify)(token, process.env.JWT_SECRET);\r\n\r\n  const currentUser = await User.findById(verifiedToken.id);\r\n\r\n  console.log(\"req.headers.authorization\", req.headers.authorization, \"verifiedToken\", currentUser);\r\n\r\n  req.user = currentUser;\r\n  next();\r\n};\r\n\r\nexports.getUser = (req, res) => {\r\n  console.log(\"protected accesed\");\r\n\r\n  const user = req.user;\r\n\r\n  res.json({\r\n    user,\r\n  });\r\n};\r\n\r\nexports.getFrontUser = async (token) => {\r\n  console.log(\"componentmounted\", token);\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(\"http://localhost:3000/api/users/cart\", config);\r\n    return data;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}