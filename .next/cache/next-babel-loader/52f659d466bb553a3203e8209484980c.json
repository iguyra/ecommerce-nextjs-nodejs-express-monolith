{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar mongoose = require(\"mongoose\");\n\nvar validator = require(\"validator\");\n\nvar bcrypt = require(\"bcryptjs\");\n\nvar userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: [true, \"please tell us your email\"],\n    unique: true,\n    lowercase: true,\n    validate: [validator.isEmail, \"please provie a valid email\"]\n  },\n  photo: String,\n  password: {\n    type: String,\n    required: [true, \"please provie password\"],\n    minlength: 8,\n    select: false // to not show up in any output\n\n  },\n  passwordConfirm: {\n    type: String,\n    required: [true, \"please confirm your password\"],\n    validate: {\n      //this only works on CREATE N SAVE!!\n      validator: function validator(el) {\n        return el === this.password; // el is the passwordConfirm eg: abc === abc will return true\n      },\n      message: \"passwords are not the same\"\n    }\n  }\n});\nuserSchema.pre(\"save\", /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(next) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return bcrypt.hash(this.password, 12);\n\n          case 2:\n            this.password = _context.sent;\n            this.passwordConfirm = undefined;\n            next();\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\nuserSchema.methods.correctPassword = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(candidatePassword, userPassword) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return bcrypt.compare(candidatePassword, userPassword);\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar User = mongoose.model(\"User\", userSchema);\nmongoose.models = {};\nmodule.exports = User;","map":null,"metadata":{},"sourceType":"script"}