{"ast":null,"code":"import { create } from \"./server/models/userModel\";\nexport const addFirstProduct = product => {\n  let productPrice = product.price; //create an empty array and push the item\n\n  let newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: +productPrice\n  };\n  const newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\n  return newCart;\n}; // create a new product object\n\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    product_id: product._id,\n    image: product.image,\n    price: productPrice,\n    name: product.name,\n    qty: qty,\n    totalPrice: productPrice * qty\n  };\n};\nexport const updateCart = (existingCart, product, qtytoBeAdded, newQty = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qtytoBeAdded, newQty);\n\n  const addPrice = (total, item) => {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  }; //loop through the updated proudct array and add the totALprice of each item to get the totalPrice\n\n\n  let total = updatedProducts.reduce(addPrice, {\n    totalPrice: 0,\n    qty: 0\n  });\n  const updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: +total.qty,\n    totalProductsPrice: +total.totalPrice\n  };\n  localStorage.setItem(\"isavecart\", JSON.stringify(updatedCart));\n  return updatedCart;\n}; //get updated products array\n//update the product if its exist\n//and add the new product to the existing cart\n\nexport const getUpdatedProducts = (existingProductsInCart, product, qtyToBeAdded, newQty = false) => {\n  const productExistIndex = isProductInCart(existingProductsInCart, product._id);\n  console.log(\"productExistIndex\", productExistIndex, product._id, product.productId); //if product exist (index of that product is found in te array) update the product qunatity and totalPrice\n\n  if (-1 < productExistIndex) {\n    let updatedProducts = existingProductsInCart;\n    let updatedProduct = updatedProducts[productExistIndex]; //if we have the new quantity of the product avail, se that else add the qtyToBeAdded\n\n    updatedProduct.qty = newQty ? +newQty : +updatedProduct.qty + qtyToBeAdded;\n    updatedProduct.totalPrice = +updatedProduct.price * +updatedProduct.qty; // updatedProduct.totalPrice = updatedProduct.price * updatedProduct.qty;\n\n    let newUpdatedProducts = [];\n    newUpdatedProducts.push(updatedProduct);\n    return newUpdatedProducts;\n  } else {\n    //if the product is not found push the new product to the existing product array\n    let productPrice = +product.price;\n    const newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\n    existingProductsInCart.push(newProduct);\n    return existingProductsInCart;\n  }\n}; //return index of the product if it exists\n\nexport const isProductInCart = (existingProductsInCart, productId) => {\n  const returnItemThatExists = (item, index) => {\n    if (productId === item.productId) {\n      return item;\n    }\n  };\n\n  const newArray = existingProductsInCart.filter(returnItemThatExists);\n  console.log(\"returnItemThatExists\", productId, newArray);\n  return existingProductsInCart.indexOf(newArray[0]);\n};\nexport const updateQuantity = (product, productCount) => {\n  const newQty = +productCount + 1;\n  console.log(newQty);\n  const productPrice = product.price;\n  let newCart = {\n    products: [],\n    totalProductsCount: newQty,\n    totalProductsPrice: +productPrice * newQty\n  };\n  const newProduct = createNewProduct(product, productPrice, newQty);\n  newCart.products.push(newProduct);\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\n  console.log(newCart);\n  return {\n    newQty,\n    newCart\n  };\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/isave/functions.js"],"names":["create","addFirstProduct","product","productPrice","price","newCart","products","totalProductsCount","totalProductsPrice","newProduct","createNewProduct","push","localStorage","setItem","JSON","stringify","qty","product_id","_id","image","name","totalPrice","updateCart","existingCart","qtytoBeAdded","newQty","updatedProducts","getUpdatedProducts","addPrice","total","item","reduce","updatedCart","existingProductsInCart","qtyToBeAdded","productExistIndex","isProductInCart","console","log","productId","updatedProduct","newUpdatedProducts","returnItemThatExists","index","newArray","filter","indexOf","updateQuantity","productCount"],"mappings":"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","sourcesContent":["import { create } from \"./server/models/userModel\";\r\n\r\nexport const addFirstProduct = (product) => {\r\n  let productPrice = product.price;\r\n\r\n  //create an empty array and push the item\r\n\r\n  let newCart = {\r\n    products: [],\r\n    totalProductsCount: 1,\r\n    totalProductsPrice: +productPrice,\r\n  };\r\n\r\n  const newProduct = createNewProduct(product, productPrice, 1);\r\n\r\n  newCart.products.push(newProduct);\r\n\r\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\r\n  return newCart;\r\n};\r\n\r\n// create a new product object\r\nexport const createNewProduct = (product, productPrice, qty) => {\r\n  return {\r\n    product_id: product._id,\r\n    image: product.image,\r\n    price: productPrice,\r\n    name: product.name,\r\n    qty: qty,\r\n    totalPrice: productPrice * qty,\r\n  };\r\n};\r\n\r\nexport const updateCart = (existingCart, product, qtytoBeAdded, newQty = false) => {\r\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qtytoBeAdded, newQty);\r\n\r\n  const addPrice = (total, item) => {\r\n    total.totalPrice += item.totalPrice;\r\n    total.qty += item.qty;\r\n\r\n    return total;\r\n  };\r\n\r\n  //loop through the updated proudct array and add the totALprice of each item to get the totalPrice\r\n  let total = updatedProducts.reduce(addPrice, { totalPrice: 0, qty: 0 });\r\n\r\n  const updatedCart = {\r\n    products: updatedProducts,\r\n    totalProductsCount: +total.qty,\r\n    totalProductsPrice: +total.totalPrice,\r\n  };\r\n  localStorage.setItem(\"isavecart\", JSON.stringify(updatedCart));\r\n  return updatedCart;\r\n};\r\n\r\n//get updated products array\r\n//update the product if its exist\r\n//and add the new product to the existing cart\r\nexport const getUpdatedProducts = (existingProductsInCart, product, qtyToBeAdded, newQty = false) => {\r\n  const productExistIndex = isProductInCart(existingProductsInCart, product._id);\r\n  console.log(\"productExistIndex\", productExistIndex, product._id, product.productId);\r\n\r\n  //if product exist (index of that product is found in te array) update the product qunatity and totalPrice\r\n  if (-1 < productExistIndex) {\r\n    let updatedProducts = existingProductsInCart;\r\n    let updatedProduct = updatedProducts[productExistIndex];\r\n\r\n    //if we have the new quantity of the product avail, se that else add the qtyToBeAdded\r\n\r\n    updatedProduct.qty = newQty ? +newQty : +updatedProduct.qty + qtyToBeAdded;\r\n    updatedProduct.totalPrice = +updatedProduct.price * +updatedProduct.qty;\r\n    // updatedProduct.totalPrice = updatedProduct.price * updatedProduct.qty;\r\n\r\n    let newUpdatedProducts = [];\r\n\r\n    newUpdatedProducts.push(updatedProduct);\r\n\r\n    return newUpdatedProducts;\r\n  } else {\r\n    //if the product is not found push the new product to the existing product array\r\n    let productPrice = +product.price;\r\n    const newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\r\n    existingProductsInCart.push(newProduct);\r\n    return existingProductsInCart;\r\n  }\r\n};\r\n\r\n//return index of the product if it exists\r\nexport const isProductInCart = (existingProductsInCart, productId) => {\r\n  const returnItemThatExists = (item, index) => {\r\n    if (productId === item.productId) {\r\n      return item;\r\n    }\r\n  };\r\n\r\n  const newArray = existingProductsInCart.filter(returnItemThatExists);\r\n  console.log(\"returnItemThatExists\", productId, newArray);\r\n\r\n  return existingProductsInCart.indexOf(newArray[0]);\r\n};\r\n\r\nexport const updateQuantity = (product, productCount) => {\r\n  const newQty = +productCount + 1;\r\n  console.log(newQty);\r\n  const productPrice = product.price;\r\n\r\n  let newCart = {\r\n    products: [],\r\n    totalProductsCount: newQty,\r\n    totalProductsPrice: +productPrice * newQty,\r\n  };\r\n  const newProduct = createNewProduct(product, productPrice, newQty);\r\n\r\n  newCart.products.push(newProduct);\r\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\r\n  console.log(newCart);\r\n\r\n  return { newQty, newCart };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}