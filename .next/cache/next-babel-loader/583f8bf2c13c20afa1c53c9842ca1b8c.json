{"ast":null,"code":"var mongoose = require(\"mongoose\");\n\nvar validator = require(\"validator\");\n\nvar userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: [true, \"please tell us your email\"],\n    unique: true,\n    lowercase: true,\n    validate: [validator.isEmail, \"please provie a valid email\"]\n  },\n  photo: String,\n  password: {\n    type: String,\n    required: [true, \"please provie password\"],\n    minlength: 8,\n    select: false // to not show up in any output\n\n  },\n  passwordConfirm: {\n    type: String,\n    required: [true, \"please confirm your password\"],\n    validate: {\n      //this only works on CREATE N SAVE!!\n      validator: function validator(el) {\n        return el === this.password; // el is the passwordConfirm eg: abc === abc will return true\n      },\n      message: \"passwords are not the same\"\n    }\n  }\n});\nvar user = mongoose.model(\"ProfileUser\", userSchema);\nmodule.exports = user;","map":{"version":3,"sources":["C:/Users/USER/Desktop/isave/server/models/userModel.js"],"names":["mongoose","require","validator","userSchema","Schema","email","type","String","required","unique","lowercase","validate","isEmail","photo","password","minlength","select","passwordConfirm","el","message","user","model","module","exports"],"mappings":"AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AAEA,IAAME,UAAU,GAAG,IAAIH,QAAQ,CAACI,MAAb,CAAoB;AACrCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,2BAAP,CAFL;AAGLC,IAAAA,MAAM,EAAE,IAHH;AAILC,IAAAA,SAAS,EAAE,IAJN;AAKLC,IAAAA,QAAQ,EAAE,CAACT,SAAS,CAACU,OAAX,EAAoB,6BAApB;AALL,GAD8B;AAQrCC,EAAAA,KAAK,EAAEN,MAR8B;AAUrCO,EAAAA,QAAQ,EAAE;AACRR,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,wBAAP,CAFF;AAGRO,IAAAA,SAAS,EAAE,CAHH;AAIRC,IAAAA,MAAM,EAAE,KAJA,CAIO;;AAJP,GAV2B;AAiBrCC,EAAAA,eAAe,EAAE;AACfX,IAAAA,IAAI,EAAEC,MADS;AAEfC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,8BAAP,CAFK;AAGfG,IAAAA,QAAQ,EAAE;AACR;AACAT,MAAAA,SAAS,EAAE,mBAAUgB,EAAV,EAAc;AACvB,eAAOA,EAAE,KAAK,KAAKJ,QAAnB,CADuB,CACM;AAC9B,OAJO;AAKRK,MAAAA,OAAO,EAAE;AALD;AAHK;AAjBoB,CAApB,CAAnB;AA8BA,IAAMC,IAAI,GAAGpB,QAAQ,CAACqB,KAAT,CAAe,aAAf,EAA8BlB,UAA9B,CAAb;AAEAmB,MAAM,CAACC,OAAP,GAAiBH,IAAjB","sourcesContent":["const mongoose = require(\"mongoose\");\r\nconst validator = require(\"validator\");\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  email: {\r\n    type: String,\r\n    required: [true, \"please tell us your email\"],\r\n    unique: true,\r\n    lowercase: true,\r\n    validate: [validator.isEmail, \"please provie a valid email\"],\r\n  },\r\n  photo: String,\r\n\r\n  password: {\r\n    type: String,\r\n    required: [true, \"please provie password\"],\r\n    minlength: 8,\r\n    select: false, // to not show up in any output\r\n  },\r\n\r\n  passwordConfirm: {\r\n    type: String,\r\n    required: [true, \"please confirm your password\"],\r\n    validate: {\r\n      //this only works on CREATE N SAVE!!\r\n      validator: function (el) {\r\n        return el === this.password; // el is the passwordConfirm eg: abc === abc will return true\r\n      },\r\n      message: \"passwords are not the same\",\r\n    },\r\n  },\r\n});\r\n\r\nconst user = mongoose.model(\"ProfileUser\", userSchema);\r\n\r\nmodule.exports = user;\r\n"]},"metadata":{},"sourceType":"script"}