{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nexport var AppContext = /*#__PURE__*/React.createContext([{}, function () {}]);\n\nvar AppProvider = function AppProvider(props) {\n  _s();\n\n  var _useState = useState(null),\n      cart = _useState[0],\n      setCart = _useState[1];\n\n  useEffect(function () {\n    if (true) {\n      var cartData = localStorage.getItem(\"cart-data\");\n      cartData = null !== cartData ? JSON.parse(cartData) : \"\";\n      setCart(cartData);\n    }\n  }, []);\n  console.log(\"app cart\", cart);\n  return /*#__PURE__*/_jsx(AppContext.Provider, {\n    value: [cart, setCart],\n    children: props.children\n  });\n};\n\n_s(AppProvider, \"GFK0CC7GMGqGCJ6zwyfFVjZxPPc=\");\n\n_c = AppProvider;\nexport default AppProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/isave/context/appContext.js"],"names":["React","useState","useEffect","AppContext","createContext","AppProvider","props","cart","setCart","cartData","localStorage","getItem","JSON","parse","console","log","children"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,IAAMC,UAAU,gBAAGH,KAAK,CAACI,aAAN,CAAoB,CAAC,EAAD,EAAK,YAAM,CAAE,CAAb,CAApB,CAAnB;;AAEP,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAAA;;AAAA,kBACLL,QAAQ,CAAC,IAAD,CADH;AAAA,MACtBM,IADsB;AAAA,MAChBC,OADgB;;AAG7BN,EAAAA,SAAS,CAAC,YAAM;AACd,cAAqB;AACnB,UAAIO,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAf;AAEAF,MAAAA,QAAQ,GAAG,SAASA,QAAT,GAAoBG,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAApB,GAA2C,EAAtD;AACAD,MAAAA,OAAO,CAACC,QAAD,CAAP;AACD;AACF,GAPQ,EAON,EAPM,CAAT;AAQAK,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBR,IAAxB;AACA,sBAAO,KAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE,CAACA,IAAD,EAAOC,OAAP,CAA5B;AAAA,cAA8CF,KAAK,CAACU;AAApD,IAAP;AACD,CAbD;;GAAMX,W;;KAAAA,W;AAeN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport const AppContext = React.createContext([{}, () => {}]);\r\n\r\nconst AppProvider = (props) => {\r\n  const [cart, setCart] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (process.browser) {\r\n      let cartData = localStorage.getItem(\"cart-data\");\r\n\r\n      cartData = null !== cartData ? JSON.parse(cartData) : \"\";\r\n      setCart(cartData);\r\n    }\r\n  }, []);\r\n  console.log(\"app cart\", cart);\r\n  return <AppContext.Provider value={[cart, setCart]}>{props.children}</AppContext.Provider>;\r\n};\r\n\r\nexport default AppProvider;\r\n"]},"metadata":{},"sourceType":"module"}