{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar axios = require(\"axios\");\n\nexports.loginUser = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(email, password) {\n    var user;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"on login\");\n            _context.next = 3;\n            return axios.get(\"/api/signup\");\n\n          case 3:\n            user = _context.sent;\n            //   const user = {\n            //     res: \"user\",\n            //     part: \"res\",\n            //   };\n            console.log(\"loginuser\", user);\n            return _context.abrupt(\"return\", user);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.signup = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res, next) {\n    var newUser;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // const newUser = await User.create({\n            //   email: req.body.email,\n            //   password: req.body.password,\n            //   password: req.body.passwordConfirm,\n            // });\n            try {\n              newUser = {\n                email: req.body.email,\n                password: req.body.password,\n                passwordConfirm: req.body.passwordConfirm\n              };\n              console.log(newUser);\n              res.json({\n                status: \"ok\",\n                newUser: newUser\n              });\n            } catch (err) {\n              console.log(err);\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/USER/Desktop/isave/server/fauthContoller.js"],"names":["axios","require","exports","loginUser","email","password","console","log","get","user","signup","req","res","next","newUser","body","passwordConfirm","json","status","err"],"mappings":";;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEAC,OAAO,CAACC,SAAR;AAAA,sEAAoB,iBAAOC,KAAP,EAAcC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AADkB;AAAA,mBAECP,KAAK,CAACQ,GAAN,CAAU,aAAV,CAFD;;AAAA;AAEZC,YAAAA,IAFY;AAGlB;AACA;AACA;AACA;AACAH,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBE,IAAzB;AAPkB,6CAQXA,IARW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA;;AAWAP,OAAO,CAACQ,MAAR;AAAA,uEAAiB,kBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACf;AACA;AACA;AACA;AACA;AACA,gBAAI;AACIC,cAAAA,OADJ,GACc;AACdV,gBAAAA,KAAK,EAAEO,GAAG,CAACI,IAAJ,CAASX,KADF;AAEdC,gBAAAA,QAAQ,EAAEM,GAAG,CAACI,IAAJ,CAASV,QAFL;AAGdW,gBAAAA,eAAe,EAAEL,GAAG,CAACI,IAAJ,CAASC;AAHZ,eADd;AAOFV,cAAAA,OAAO,CAACC,GAAR,CAAYO,OAAZ;AACAF,cAAAA,GAAG,CAACK,IAAJ,CAAS;AACPC,gBAAAA,MAAM,EAAE,IADD;AAEPJ,gBAAAA,OAAO,EAAPA;AAFO,eAAT;AAID,aAZD,CAYE,OAAOK,GAAP,EAAY;AACZb,cAAAA,OAAO,CAACC,GAAR,CAAYY,GAAZ;AACD;;AApBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const axios = require(\"axios\");\r\n\r\nexports.loginUser = async (email, password) => {\r\n  console.log(\"on login\");\r\n  const user = await axios.get(\"/api/signup\");\r\n  //   const user = {\r\n  //     res: \"user\",\r\n  //     part: \"res\",\r\n  //   };\r\n  console.log(\"loginuser\", user);\r\n  return user;\r\n};\r\n\r\nexports.signup = async (req, res, next) => {\r\n  // const newUser = await User.create({\r\n  //   email: req.body.email,\r\n  //   password: req.body.password,\r\n  //   password: req.body.passwordConfirm,\r\n  // });\r\n  try {\r\n    const newUser = {\r\n      email: req.body.email,\r\n      password: req.body.password,\r\n      passwordConfirm: req.body.passwordConfirm,\r\n    };\r\n\r\n    console.log(newUser);\r\n    res.json({\r\n      status: \"ok\",\r\n      newUser,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}