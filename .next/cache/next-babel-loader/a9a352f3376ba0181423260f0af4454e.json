{"ast":null,"code":"import { create } from \"./server/models/userModel\";\nexport const addFirstProduct = product => {\n  let productPrice = product.price; //create an empty array and push the item\n\n  let newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: +productPrice\n  };\n  const newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\n  return newCart;\n}; // create a new product object\n\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    _id: product._id,\n    image: product.image,\n    price: productPrice,\n    name: product.name,\n    qty: qty,\n    totalPrice: productPrice * qty\n  };\n};\nexport const updateCart = (existingCart, product, qtytoBeAdded, newQty = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qtytoBeAdded, newQty);\n\n  const addPrice = (total, item) => {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  }; //loop through the updated proudct array and add the totALprice of each item to get the totalPrice\n\n\n  let total = updatedProducts.reduce(addPrice, {\n    totalPrice: 0,\n    qty: 0\n  });\n  const updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: +total.qty,\n    totalProductsPrice: +total.totalPrice\n  };\n  localStorage.setItem(\"isavecart\", JSON.stringify(updatedCart));\n  return updatedCart;\n}; //get updated products array\n//update the product if its exist\n//and add the new product to the existing cart\n\nexport const getUpdatedProducts = (existingProductsInCart, product, qtyToBeAdded, newQty = false) => {\n  const productExistIndex = isProductInCart(existingProductsInCart, product._id);\n  console.log(\"productExistIndex\", productExistIndex, product._id, product.productId); //if product exist (index of that product is found in te array) update the product qunatity and totalPrice\n\n  if (-1 < productExistIndex) {\n    let updatedProducts = existingProductsInCart;\n    let updatedProduct = updatedProducts[productExistIndex]; //if we have the new quantity of the product avail, se that else add the qtyToBeAdded\n\n    updatedProduct.qty = newQty ? +newQty : +updatedProduct.qty + qtyToBeAdded;\n    updatedProduct.totalPrice = +updatedProduct.price * +updatedProduct.qty; // updatedProduct.totalPrice = updatedProduct.price * updatedProduct.qty;\n\n    return updatedProducts;\n  } else {\n    //if the product is not found push the new product to the existing product array\n    let productPrice = +product.price;\n    const newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\n    existingProductsInCart.push(newProduct);\n    return existingProductsInCart;\n  }\n}; //return index of the product if it exists\n\nexport const isProductInCart = (existingProductsInCart, productId) => {\n  const returnItemThatExists = (item, index) => {\n    if (productId === item._id) {\n      return item;\n    }\n  };\n\n  const newArray = existingProductsInCart.filter(returnItemThatExists);\n  console.log(\"returnItemThatExists\", productId, newArray);\n  return existingProductsInCart.indexOf(newArray[0]);\n};\nexport const updateQuantity = (product, productCount) => {\n  const newQty = +productCount + 1;\n  console.log(newQty);\n  const productPrice = product.price;\n  let newCart = {\n    products: [],\n    totalProductsCount: newQty,\n    totalProductsPrice: +productPrice * newQty\n  };\n  const newProduct = createNewProduct(product, productPrice, newQty);\n  newCart.products.push(newProduct);\n  localStorage.setItem(\"isavecart\", JSON.stringify(newCart));\n  console.log(newCart);\n  return {\n    newQty,\n    newCart\n  };\n};","map":null,"metadata":{},"sourceType":"module"}